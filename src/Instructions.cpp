#include "Instructions.h"

const Instruction instructions8085[] = {
	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x00,	"NOP",		CONTROL,	0,	NONE),
	Instruction(0x01,	"LXI B,",	MOVE,		2,	IMMEDIATE),
	Instruction(0x02,	"STAX B",	MOVE,		0,	NONE),
	Instruction(0x03,	"INX B",	ARITHMETIC,	0,	NONE),
	Instruction(0x04,	"INR B",	ARITHMETIC,	0,	NONE),
	Instruction(0x05,	"DCR B",	ARITHMETIC,	0,	NONE),
	Instruction(0x06,	"MVI B,",	MOVE,		1,	IMMEDIATE),
	Instruction(0x07,	"RLC",		ARITHMETIC,	0,	NONE),
	Instruction(0x08,	"(DSUB)",	ARITHMETIC,	0,	NONE),
	Instruction(0x09,	"DAD B",	ARITHMETIC,	0,	NONE),
	Instruction(0x0a,	"LDAX B",	MOVE,		0,	NONE),
	Instruction(0x0b,	"DCX B",	ARITHMETIC,	0,	NONE),
	Instruction(0x0c,	"INR C",	ARITHMETIC,	0,	NONE),
	Instruction(0x0d,	"DCR C",	ARITHMETIC,	0,	NONE),
	Instruction(0x0e,	"MVI C,",	MOVE,		1,	IMMEDIATE),
	Instruction(0x0f,	"RRC",		ARITHMETIC,	0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x10,	"*ARHL",	ARITHMETIC,	0,	NONE),
	Instruction(0x11,	"LXI D,",	MOVE,		2,	IMMEDIATE),
	Instruction(0x12,	"STAX D",	MOVE,		0,	NONE),
	Instruction(0x13,	"INX D",	ARITHMETIC,	0,	NONE),
	Instruction(0x14,	"INR D",	ARITHMETIC,	0,	NONE),
	Instruction(0x15,	"DCR D",	ARITHMETIC,	0,	NONE),
	Instruction(0x16,	"MVI D,",	MOVE,		1,	IMMEDIATE),
	Instruction(0x17,	"RAL",		ARITHMETIC,	0,	NONE),
	Instruction(0x18,	"(RLDE)",	ARITHMETIC,	0,	NONE),
	Instruction(0x19,	"DAD D",	ARITHMETIC,	0,	NONE),
	Instruction(0x1a,	"LDAX D",	MOVE,		0,	NONE),
	Instruction(0x1b,	"DCX D",	ARITHMETIC,	0,	NONE),
	Instruction(0x1c,	"INR E",	ARITHMETIC,	0,	NONE),
	Instruction(0x1d,	"DCR E",	ARITHMETIC,	0,	NONE),
	Instruction(0x1e,	"MVI E,",	MOVE,		1,	IMMEDIATE),
	Instruction(0x1f,	"RAR",		ARITHMETIC,	0,	NONE),

	//		    Opcode  Mnemonic    Ins. type  #Op  Op type
	Instruction(0x20,	"RIM",		CONTROL,	0,	NONE),
	Instruction(0x21,	"LXI H,",	MOVE,		2,	IMMEDIATE),
	Instruction(0x22,	"SHLD ",	MOVE,		2,	ADDRESS),
	Instruction(0x23,	"INX H",	ARITHMETIC,	0,	NONE),
	Instruction(0x24,	"INR H",	ARITHMETIC,	0,	NONE),
	Instruction(0x25,	"DCR H",	ARITHMETIC,	0,	NONE),
	Instruction(0x26,	"MVI H,",	MOVE,		1,	IMMEDIATE),
	Instruction(0x27,	"DAA",		ARITHMETIC,	0,	NONE),
	Instruction(0x28,	"(LDHI) ",	ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0x29,	"DAD H",	ARITHMETIC,	0,	NONE),
	Instruction(0x2a,	"LHLD ",	MOVE,		2,	ADDRESS),
	Instruction(0x2b,	"DCX H",	ARITHMETIC,	0,	NONE),
	Instruction(0x2c,	"INR L",	ARITHMETIC,	0,	NONE),
	Instruction(0x2d,	"DCR L",	ARITHMETIC,	0,	NONE),
	Instruction(0x2e,	"MVI L,",	MOVE,		1,	IMMEDIATE),
	Instruction(0x2f,	"CMA",		ARITHMETIC,	0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x30,	"SIM",		CONTROL,	0,	NONE),
	Instruction(0x31,	"LXI SP, ",	MOVE,		2,	IMMEDIATE),
	Instruction(0x32,	"STA ",		MOVE,		2,	ADDRESS),
	Instruction(0x33,	"INX SP",	ARITHMETIC,	0,	NONE),
	Instruction(0x34,	"INR M",	ARITHMETIC,	0,	NONE),
	Instruction(0x35,	"DCR M",	ARITHMETIC,	0,	NONE),
	Instruction(0x36,	"MVI M, ",	MOVE,		1,	IMMEDIATE),
	Instruction(0x37,	"STC",		ARITHMETIC,	0,	NONE),
	Instruction(0x38,	"(LDSI) ",	ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0x39,	"DAD SP",	ARITHMETIC,	0,	NONE),
	Instruction(0x3a,	"LDA ",		MOVE,		2,	ADDRESS),
	Instruction(0x3b,	"DCX SP",	ARITHMETIC,	0,	NONE),
	Instruction(0x3c,	"INR A",	ARITHMETIC,	0,	NONE),
	Instruction(0x3d,	"DCR A",	ARITHMETIC,	0,	NONE),
	Instruction(0x3e,	"MVI A,",	MOVE,		1,	IMMEDIATE),
	Instruction(0x3f,	"CMC",		ARITHMETIC,	0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x40,	"MOV B,B",	MOVE,		0,	NONE),
	Instruction(0x41,	"MOV B,C",	MOVE,		0,	NONE),
	Instruction(0x42,	"MOV B,D",	MOVE,		0,	NONE),
	Instruction(0x43,	"MOV B,E",	MOVE,		0,	NONE),
	Instruction(0x44,	"MOV B,H",	MOVE,		0,	NONE),
	Instruction(0x45,	"MOV B,L",	MOVE,		0,	NONE),
	Instruction(0x46,	"MOV B,M",	MOVE,		0,	NONE),
	Instruction(0x47,	"MOV B,A",	MOVE,		0,	NONE),
	Instruction(0x48,	"MOV C,B",	MOVE,		0,	NONE),
	Instruction(0x49,	"MOV C,C",	MOVE,		0,	NONE),
	Instruction(0x4a,	"MOV C,D",	MOVE,		0,	NONE),
	Instruction(0x4b,	"MOV C,E",	MOVE,		0,	NONE),
	Instruction(0x4c,	"MOV C,H",	MOVE,		0,	NONE),
	Instruction(0x4d,	"MOV C,L",	MOVE,		0,	NONE),
	Instruction(0x4e,	"MOV C,M",	MOVE,		0,	NONE),
	Instruction(0x4f,	"MOV C,A",	MOVE,		0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x50,	"MOV D,B",	MOVE,		0,	NONE),
	Instruction(0x51,	"MOV D,C",	MOVE,		0,	NONE),
	Instruction(0x52,	"MOV D,D",	MOVE,		0,	NONE),
	Instruction(0x53,	"MOV D,E",	MOVE,		0,	NONE),
	Instruction(0x54,	"MOV D,H",	MOVE,		0,	NONE),
	Instruction(0x55,	"MOV D,L",	MOVE,		0,	NONE),
	Instruction(0x56,	"MOV D,M",	MOVE,		0,	NONE),
	Instruction(0x57,	"MOV D,A",	MOVE,		0,	NONE),
	Instruction(0x58,	"MOV E,B",	MOVE,		0,	NONE),
	Instruction(0x59,	"MOV E,C",	MOVE,		0,	NONE),
	Instruction(0x5a,	"MOV E,D",	MOVE,		0,	NONE),
	Instruction(0x5b,	"MOV E,E",	MOVE,		0,	NONE),
	Instruction(0x5c,	"MOV E,H",	MOVE,		0,	NONE),
	Instruction(0x5d,	"MOV E,L",	MOVE,		0,	NONE),
	Instruction(0x5e,	"MOV E,M",	MOVE,		0,	NONE),
	Instruction(0x5f,	"MOV E,A",	MOVE,		0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x60,	"MOV H,B",	MOVE,		0,	NONE),
	Instruction(0x61,	"MOV H,C",	MOVE,		0,	NONE),
	Instruction(0x62,	"MOV H,D",	MOVE,		0,	NONE),
	Instruction(0x63,	"MOV H,E",	MOVE,		0,	NONE),
	Instruction(0x64,	"MOV H,H",	MOVE,		0,	NONE),
	Instruction(0x65,	"MOV H,L",	MOVE,		0,	NONE),
	Instruction(0x66,	"MOV H,M",	MOVE,		0,	NONE),
	Instruction(0x67,	"MOV H,A",	MOVE,		0,	NONE),
	Instruction(0x68,	"MOV L,B",	MOVE,		0,	NONE),
	Instruction(0x69,	"MOV L,C",	MOVE,		0,	NONE),
	Instruction(0x6a,	"MOV L,D",	MOVE,		0,	NONE),
	Instruction(0x6b,	"MOV L,E",	MOVE,		0,	NONE),
	Instruction(0x6c,	"MOV L,H",	MOVE,		0,	NONE),
	Instruction(0x6d,	"MOV L,L",	MOVE,		0,	NONE),
	Instruction(0x6e,	"MOV L,M",	MOVE,		0,	NONE),
	Instruction(0x6f,	"MOV L,A",	MOVE,		0,	NONE),
	
	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x70,	"MOV M,B",	MOVE,		0,	NONE),
	Instruction(0x71,	"MOV M,C",	MOVE,		0,	NONE),
	Instruction(0x72,	"MOV M,D",	MOVE,		0,	NONE),
	Instruction(0x73,	"MOV M,E",	MOVE,		0,	NONE),
	Instruction(0x74,	"MOV M,H",	MOVE,		0,	NONE),
	Instruction(0x75,	"MOV M,L",	MOVE,		0,	NONE),
	Instruction(0x76,	"HLT",		CONTROL,	0,	NONE),
	Instruction(0x77,	"MOV M,A",	MOVE,		0,	NONE),
	Instruction(0x78,	"MOV A,B",	MOVE,		0,	NONE),
	Instruction(0x79,	"MOV A,C",	MOVE,		0,	NONE),
	Instruction(0x7a,	"MOV A,D",	MOVE,		0,	NONE),
	Instruction(0x7b,	"MOV A,E",	MOVE,		0,	NONE),
	Instruction(0x7c,	"MOV A,H",	MOVE,		0,	NONE),
	Instruction(0x7d,	"MOV A,L",	MOVE,		0,	NONE),
	Instruction(0x7e,	"MOV A,M",	MOVE,		0,	NONE),
	Instruction(0x7f,	"MOV A,A",	MOVE,		0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x80,	"ADD B",	ARITHMETIC, 0,	NONE),
	Instruction(0x81,	"ADD C",	ARITHMETIC, 0,	NONE),
	Instruction(0x82,	"ADD D",	ARITHMETIC, 0,	NONE),
	Instruction(0x83,	"ADD E",	ARITHMETIC, 0,	NONE),
	Instruction(0x84,	"ADD H",	ARITHMETIC, 0,	NONE),
	Instruction(0x85,	"ADD L",	ARITHMETIC, 0,	NONE),
	Instruction(0x86,	"ADD M",	ARITHMETIC, 0,	NONE),
	Instruction(0x87,	"ADD A",	ARITHMETIC, 0,	NONE),
	Instruction(0x88,	"ADC B",	ARITHMETIC, 0,	NONE),
	Instruction(0x89,	"ADC C",	ARITHMETIC, 0,	NONE),
	Instruction(0x8a,	"ADC D",	ARITHMETIC, 0,	NONE),
	Instruction(0x8b,	"ADC E",	ARITHMETIC, 0,	NONE),
	Instruction(0x8c,	"ADC H",	ARITHMETIC, 0,	NONE),
	Instruction(0x8d,	"ADC L",	ARITHMETIC, 0,	NONE),
	Instruction(0x8e,	"ADC M",	ARITHMETIC, 0,	NONE),
	Instruction(0x8f,	"ADC A",	ARITHMETIC, 0,	NONE),
	
	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0x90,	"SUB B",	ARITHMETIC, 0,	NONE),
	Instruction(0x91,	"SUB C",	ARITHMETIC, 0,	NONE),
	Instruction(0x92,	"SUB D",	ARITHMETIC, 0,	NONE),
	Instruction(0x93,	"SUB E",	ARITHMETIC, 0,	NONE),
	Instruction(0x94,	"SUB H",	ARITHMETIC, 0,	NONE),
	Instruction(0x95,	"SUB L",	ARITHMETIC, 0,	NONE),
	Instruction(0x96,	"SUB M",	ARITHMETIC, 0,	NONE),
	Instruction(0x97,	"SUB A",	ARITHMETIC, 0,	NONE),
	Instruction(0x98,	"SBB B",	ARITHMETIC, 0,	NONE),
	Instruction(0x99,	"SBB C",	ARITHMETIC, 0,	NONE),
	Instruction(0x9a,	"SBB D",	ARITHMETIC, 0,	NONE),
	Instruction(0x9b,	"SBB E",	ARITHMETIC, 0,	NONE),
	Instruction(0x9c,	"SBB H",	ARITHMETIC, 0,	NONE),
	Instruction(0x9d,	"SBB L",	ARITHMETIC, 0,	NONE),
	Instruction(0x9e,	"SBB M",	ARITHMETIC, 0,	NONE),
	Instruction(0x9f,	"SBB A",	ARITHMETIC, 0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0xa0,	"ANA B",	ARITHMETIC, 0,	NONE),
	Instruction(0xa1,	"ANA C",	ARITHMETIC, 0,	NONE),
	Instruction(0xa2,	"ANA D",	ARITHMETIC, 0,	NONE),
	Instruction(0xa3,	"ANA E",	ARITHMETIC, 0,	NONE),
	Instruction(0xa4,	"ANA H",	ARITHMETIC, 0,	NONE),
	Instruction(0xa5,	"ANA L",	ARITHMETIC, 0,	NONE),
	Instruction(0xa6,	"ANA M",	ARITHMETIC, 0,	NONE),
	Instruction(0xa7,	"ANA A",	ARITHMETIC, 0,	NONE),
	Instruction(0xa8,	"XRA B",	ARITHMETIC, 0,	NONE),
	Instruction(0xa9,	"XRA C",	ARITHMETIC, 0,	NONE),
	Instruction(0xaa,	"XRA D",	ARITHMETIC, 0,	NONE),
	Instruction(0xab,	"XRA E",	ARITHMETIC, 0,	NONE),
	Instruction(0xac,	"XRA H",	ARITHMETIC, 0,	NONE),
	Instruction(0xad,	"XRA L",	ARITHMETIC, 0,	NONE),
	Instruction(0xae,	"XRA M",	ARITHMETIC, 0,	NONE),
	Instruction(0xaf,	"XRA A",	ARITHMETIC, 0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0xb0,	"ORA B",	ARITHMETIC, 0,	NONE),
	Instruction(0xb1,	"ORA C",	ARITHMETIC, 0,	NONE),
	Instruction(0xb2,	"ORA D",	ARITHMETIC, 0,	NONE),
	Instruction(0xb3,	"ORA E",	ARITHMETIC, 0,	NONE),
	Instruction(0xb4,	"ORA H",	ARITHMETIC, 0,	NONE),
	Instruction(0xb5,	"ORA L",	ARITHMETIC, 0,	NONE),
	Instruction(0xb6,	"ORA M",	ARITHMETIC, 0,	NONE),
	Instruction(0xb7,	"ORA A",	ARITHMETIC, 0,	NONE),
	Instruction(0xb8,	"CMP B",	ARITHMETIC, 0,	NONE),
	Instruction(0xb9,	"CMP C",	ARITHMETIC, 0,	NONE),
	Instruction(0xba,	"CMP D",	ARITHMETIC, 0,	NONE),
	Instruction(0xbb,	"CMP E",	ARITHMETIC, 0,	NONE),
	Instruction(0xbc,	"CMP H",	ARITHMETIC, 0,	NONE),
	Instruction(0xbd,	"CMP L",	ARITHMETIC, 0,	NONE),
	Instruction(0xbe,	"CMP M",	ARITHMETIC, 0,	NONE),
	Instruction(0xbf,	"CMP A",	ARITHMETIC, 0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0xc0,	"RNZ",		BRANCH,		0,	NONE),
	Instruction(0xc1,	"POP B",	MOVE,		0,	NONE),
	Instruction(0xc2,	"JNZ ",		BRANCH,		2,	ADDRESS),
	Instruction(0xc3,	"JMP ",		BRANCH,		2,	ADDRESS),
	Instruction(0xc4,	"CNZ ",		BRANCH,		2,	ADDRESS),
	Instruction(0xc5,	"PUSH B",	MOVE,		0,	NONE),
	Instruction(0xc6,	"ADI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xc7,	"RST 0",	BRANCH,		0,	NONE),
	Instruction(0xc8,	"RZ",		BRANCH,		0,	NONE),
	Instruction(0xc9,	"RET",		BRANCH,		0,	NONE),
	Instruction(0xca,	"JZ ",		BRANCH,		2,	ADDRESS),
	Instruction(0xcb,	"(RSTV)",	BRANCH,		0,	NONE),
	Instruction(0xcc,	"CZ ",		BRANCH,		2,	ADDRESS),
	Instruction(0xcd,	"CALL ",	BRANCH,		2,	ADDRESS),
	Instruction(0xce,	"ACI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xcf,	"RST 1",	BRANCH,		0,	NONE),
	
	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0xd0,	"RNC",		BRANCH,		0,	NONE),
	Instruction(0xd1,	"POP D",	MOVE,		0,	NONE),
	Instruction(0xd2,	"JNC ",		BRANCH,		2,	ADDRESS),
	Instruction(0xd3,	"OUT ",		CONTROL,	1,	IMMEDIATE),
	Instruction(0xd4,	"CNC ",		BRANCH,		2,	ADDRESS),
	Instruction(0xd5,	"PUSH D",	MOVE,		0,	NONE),
	Instruction(0xd6,	"SUI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xd7,	"RST 2",	BRANCH,		0,	NONE),
	Instruction(0xd8,	"RC",		BRANCH,		0,	NONE),
	Instruction(0xd9,	"(SHLX)",	MOVE,		0,	NONE),
	Instruction(0xda,	"JC ",		BRANCH,		2,	ADDRESS),
	Instruction(0xdb,	"IN ",		CONTROL,	1,	IMMEDIATE),
	Instruction(0xdc,	"CC ",		BRANCH,		2,	ADDRESS),
	Instruction(0xdd,	"(JNK) ",	BRANCH,		2,	ADDRESS),
	Instruction(0xde,	"SBI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xdf,	"RST 3",	BRANCH,		0,	NONE),

	
	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0xe0,	"RPO",		BRANCH,		0,	NONE),
	Instruction(0xe1,	"POP H",	MOVE,		0,	NONE),
	Instruction(0xe2,	"JPO ",		BRANCH,		2,	ADDRESS),
	Instruction(0xe3,	"XTHL ",	MOVE,		0,	NONE),
	Instruction(0xe4,	"CPO ",		BRANCH,		2,	ADDRESS),
	Instruction(0xe5,	"PUSH H",	MOVE,		0,	NONE),
	Instruction(0xe6,	"ANI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xe7,	"RST 4",	BRANCH,		0,	NONE),
	Instruction(0xe8,	"RPE",		BRANCH,		0,	NONE),
	Instruction(0xe9,	"PCHL",		BRANCH,		0,	NONE),
	Instruction(0xea,	"JPE ",		BRANCH,		2,	ADDRESS),
	Instruction(0xeb,	"XCHG",		MOVE,		0,	NONE),
	Instruction(0xec,	"CPE ",		BRANCH,		2,	ADDRESS),
	Instruction(0xed,	"(LHLX)",	MOVE,		0,	NONE),
	Instruction(0xee,	"XRI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xef,	"RST 5",	BRANCH,		0,	NONE),

	//		    Opcode  Mnemonic    Ins. type   #Op Op type
	Instruction(0xf0,	"RP",		BRANCH,		0,	NONE),
	Instruction(0xf1,	"POP PSW",	MOVE,		0,	NONE),
	Instruction(0xf2,	"JP ",		BRANCH,		2,	ADDRESS),
	Instruction(0xf3,	"DI",		CONTROL,	0,	NONE),
	Instruction(0xf4,	"CP ",		BRANCH,		2,	ADDRESS),
	Instruction(0xf5,	"PUSH PSW",	MOVE,		0,	NONE),
	Instruction(0xf6,	"ORI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xf7,	"RST 6",	BRANCH,		0,	NONE),
	Instruction(0xf8,	"RM",		BRANCH,		0,	NONE),
	Instruction(0xf9,	"SPHL",		MOVE,		0,	NONE),
	Instruction(0xfa,	"JM ",		BRANCH,		2,	ADDRESS),
	Instruction(0xfb,	"EI",		CONTROL,	0,	NONE),
	Instruction(0xfc,	"CM ",		BRANCH,		2,	ADDRESS),
	Instruction(0xfd,	"(JK) ",	BRANCH,		2,	ADDRESS),
	Instruction(0xfe,	"CPI ",		ARITHMETIC,	1,	IMMEDIATE),
	Instruction(0xff,	"RST 7",	BRANCH,		0,	NONE),

	Instruction(DATA_BYTE,	".db ",		DATA,		1,	IMMEDIATE),
	Instruction(DATA_WORD,	".dw ",		DATA,		2,  IMMEDIATE),
};